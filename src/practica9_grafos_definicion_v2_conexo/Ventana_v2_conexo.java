/* UNIVERSIDAD DE PAMPLONA
    Ingeniería de Sistemas - Matemáticas discretas: Grafos
    M.Sc. Luis Armando Portilla Granados
    Actualizado octubre de 2022: ArrayList
*/
package practica9_grafos_definicion_v2_conexo;

//import java.awt.event.MouseEvent;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Mariana
 */
public class Ventana_v2_conexo extends javax.swing.JFrame {
    static final int t = 20;  // tamaño
    static ArrayList<Nodos_v2> nodos = new ArrayList();
    static ArrayList<Aristas_v2> aristas = new ArrayList();
    static ArrayList<Integer> pesosAristas = new ArrayList();
    static int[][] matrizAd = new int[t][t]; // cambia tamaño
    static int[][] matrizIn = new int[t][t*(t-1)/2]; // posibles aristas
    static int indiceNodos = 0;
    int indiceAristas = 0;
    
    Nodos_v2 nodoSelec1 = null;
    Nodos_v2 nodoSelec2 = null;

    /**
     * Creates new form ventana
     */
    public Ventana_v2_conexo() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource ("/imagenes/grafoIcon.png")).getImage());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matemáticas discretas - Grafos");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Algoritmos"));

        jButton3.setText("Repintar aristas");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("AV (VMP)");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Grafo"));
        jPanel2.setPreferredSize(new java.awt.Dimension(365, 365));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 357, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Instrucciones"));

        jLabel1.setText("NODOS:  Agrega nodos haciendo clic sobre el panel \"Grafo\""); // NOI18N

        jLabel2.setText("ARISTAS: Agrega aristas haciendo clic derecho  sobre el par de nodos que va a unir "); // NOI18N

        jLabel3.setText("AV (VMP): Agente Viajero (Vecino más próximo)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz de adyacencia"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Matriz de incidencia"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Definición del grafo"));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(80, 117));

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jButton1.setText("Nuevo grafo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Vecino más próximo"));
        jPanel4.setPreferredSize(new java.awt.Dimension(386, 365));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Vecino más próximo"));

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(45, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Define a G(V,E)
    static String definicion(ArrayList<Nodos_v2> nodo, ArrayList<Aristas_v2> arista) {
        String cadena = "V = { ";
        if (!nodo.isEmpty()) {
            for (int i = 0; i < nodo.size()-1; i++) { // recorre todos los nodos sin el último
                cadena += nodo.get(i).getNombreN() + ", ";
            }
            cadena += nodo.get(nodo.size()-1).getNombreN(); // concadena el último nodo
        }
        cadena += " }\nA = { "; // cierra el conjunto V } y abre el conjungo A={ en otra línea
        if (!arista.isEmpty()) {
            for (int i = 0; i < arista.size()-1; i++) { // recorre todos las aristas sin la última
                cadena += arista.get(i).getNombreA() + ", " ;  
            }
            cadena += arista.get(arista.size()-1).getNombreA();// concadena la última arista
        }
        cadena += " }";
        return cadena;
    }
    
    static String mostrarAd(int m[][], ArrayList<Nodos_v2> n){
        String cadena = "";
        int i,j,k;
        for(k = 0; k<n.size();k++){
            cadena+= "\t" + n.get(k).getNombreN();
        }
        cadena+= "\n";
        for(i = 0;i<n.size();i++){
            cadena+= " " + n.get(i).getNombreN() + "\t";
            for(j=0;j<n.size();j++){
                cadena+= String.valueOf(m[i][j]) + "\t";
            }
            cadena = cadena + "\n";
        }
        return cadena;
    }
    
    static String mostrarIn(int m[][], ArrayList<Nodos_v2> n, ArrayList<Aristas_v2> a){
        String cadena = "";
        if(a.size() != 0){
             for(int k=0;k<a.size();k++){
                 cadena+= "\t" + a.get(k).getNombreA();
             }
        }
        cadena+= "\n";
        for(int i=0;i<n.size();i++){
            cadena+= " " + n.get(i).getNombreN() + "\t";
            for(int j=0;j<a.size();j++){
                cadena+= String.valueOf(m[i][j] + "\t");
            }
            cadena = cadena + "\n";
        }
        return cadena;
    }
    
    static int buscaIndiceNodo(ArrayList<Nodos_v2> nodo, String h) {
        for (int i = 0; i < nodos.size(); i++) {
            //equalsIgnoreCase() Compara dos strings para ver si son iguales
            //ignorando las diferencias entre mayúsculas y minúsculas
            if (nodo.get(i).getNombreN().equalsIgnoreCase(h)) {
                return i;
            }
        }
        return -1;
    }
    static Nodos_v2 buscaNodo(ArrayList<Nodos_v2> nodo, int xx, int yy) {
        for (int i = 0; i < nodos.size(); i++) {
            int x = nodo.get(i).getX();
            int y = nodo.get(i).getY();
            int radio = nodo.get(i).getD() + 7;
            if (xx > (x - radio) && xx < (x + radio) && yy > (y - radio) && yy < (y + radio)) {
                return nodo.get(i);
            }
        }
        return null;
    }
    
    boolean buscarArista(Nodos_v2 n1, Nodos_v2 n2, ArrayList<Aristas_v2> ar){
        for(Aristas_v2 arista: ar){
            if(arista != null){
                boolean a = arista.getN1().equals(n1), b = arista.getN2().equals(n2);
                boolean c = arista.getN2().equals(n1), d = arista.getN1().equals(n2);
                if((a && b) || (c && d)){
                    return true;
                }
            }
        }
        return false;
    }
    
    int buscarIndiceArista(Nodos_v2 n1, Nodos_v2 n2, ArrayList<Aristas_v2> ar){
        int cont = 0;
        for(int i=0;i<ar.size();i++){
            if(ar != null){
                boolean a = ar.get(i).getN1().equals(n1), b = ar.get(i).getN2().equals(n2);
                boolean c = ar.get(i).getN2().equals(n1), d = ar.get(i).getN1().equals(n2);
                if((a && b) || (c && d)){
                    cont=i;
                }
            }
        }
        return cont;
    }
    
    static public void mostrarArrayList (ArrayList<Integer> lista){
        for(int i=0;i<lista.size();i++){
            System.out.print(" "+lista.get(i)+" "); 
        }
        System.out.println("");
    }
    
    static public boolean vacio (ArrayList<Integer> lista){
        boolean b=true;
        for (int i=0; i<lista.size();i++){
            if(lista.get(i)!=-1){
                b=false;
            }
        }
        return b;
    }
    
    static boolean esCompleto(int m[][]){          //Recorre la matriz de adyacencia validando que el grafo ingresado sea completo
        boolean esCompleto = true;
        for(int i=0;i<indiceNodos;i++){
            for(int j=0;j<indiceNodos;j++){
                if(i!=j && m[i][j]==0){
                    esCompleto=false;
                    break;
                }
            }
        }
        return esCompleto;
    }
    
    String[] listaNodos(ArrayList<Nodos_v2> n){
        String Op[] = new String[nodos.size()];
        for(int k=0; k<nodos.size(); k++){
            Op[k] = nodos.get(k).getNombreN();
        }
        return Op;
    }

    void camino(String opcion){
        String nInicial=opcion;
        ArrayList<String> ope = new ArrayList<String>();
        for(int i=0;i<nodos.size();i++){
            if(nodos.get(i).getNombreN()!=opcion)
                ope.add(nodos.get(i).getNombreN()); //nodos sin el inical
        }
        String Res[] = new String[nodos.size()+1];  //string donde almacena resultado, camino resultante
        int pesosF[] = new int[nodos.size()];    //Pesos de nodos resultantes
        int n = ope.size();
        int indAr=0,pesoAr1=0,pesoAr2=0;
        int n1,n2;
        String borrar = null;
        int contP=0;
        for(int i=0;i<Res.length;i++){
            if(i==0 || i==Res.length-1){
                Res[i]=opcion;
            }else{
                n1 = buscaIndiceNodo(nodos, nInicial);
                nodoSelec1 = nodos.get(n1);
                int j;
                for(j=0;j<n;j++){
                    n2 = buscaIndiceNodo(nodos, ope.get(j));
                    nodoSelec2 = nodos.get(n2);
                    indAr = buscarIndiceArista(nodoSelec1,nodoSelec2,aristas);
                    pesoAr1 = pesosAristas.get(indAr);
                    if(j==0){
                        Res[i]=ope.get(j);
                        pesoAr2 = pesoAr1;
                    }else{
                        if(pesoAr1<pesoAr2){       //Compara pesos de las aristas
                            Res[i]=ope.get(j);
                            pesoAr2 = pesoAr1;
                        }
                    }
                }
                pesosF[contP]=pesoAr2;               
                borrar = Res[i];
                ope.remove(borrar);
                nInicial=borrar;
                n--;
                contP++;
            }
            if(i == Res.length-1){                 //Busca el peso de la última arista y lo agrega a la última posición del arry pesosF
                n1 = buscaIndiceNodo(nodos, opcion);
                nodoSelec1 = nodos.get(n1);
                n2 = buscaIndiceNodo(nodos, borrar);
                nodoSelec2 = nodos.get(n2);
                indAr = buscarIndiceArista(nodoSelec1,nodoSelec2,aristas);
                pesoAr1 = pesosAristas.get(indAr);
                pesosF[nodos.size()-1]=pesoAr1;
            }
        }
        generarGrafo(Res,pesosF);    //Hace el llamado al método generar grafo
    }
    
    void generarGrafo(String[] cNodos, int[] pesos){
        int inNodo,inNodo2;
        for(int i=0;i<cNodos.length;i++){    //Graficar nodos del camino hallado
            inNodo = buscaIndiceNodo(nodos,cNodos[i]);
            nodos.get(inNodo).pintarNodo(jPanel4.getGraphics());
        }
        int indAr=0,resPesos=0;
        for(int i=0;i<cNodos.length-1;i++){   //Graficar aristas del camino hallado
            inNodo = buscaIndiceNodo(nodos,cNodos[i]);
            inNodo2 = buscaIndiceNodo(nodos,cNodos[i+1]);
            nodoSelec1 = nodos.get(inNodo);
            nodoSelec2 = nodos.get(inNodo2);
            indAr = buscarIndiceArista(nodoSelec1,nodoSelec2,aristas);
            aristas.get(indAr).pintarArista(jPanel4.getGraphics());
            resPesos+=pesos[i];
        }   //Muestra la información del camino en el jTextArea4
        String cadena ="Nodo de Inicio: " + cNodos[0]  + "\nCamino: " + Arrays.toString(cNodos);
        cadena += "\nPeso: " + Arrays.toString(pesos) + " = " + resPesos;
        jTextArea4.setText(cadena);
        jTextArea4.setEditable(false);
    }
    
    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        int x = evt.getX();
        int y = evt.getY();
        if (SwingUtilities.isLeftMouseButton(evt)) {
                if (buscaNodo(nodos, x, y) == null) {
                    Nodos_v2 nodo = new Nodos_v2(x, y, indiceNodos);
                    nodo.pintarNodo(jPanel2.getGraphics());
                    nodos.add(nodo);
                    indiceNodos++;
                    
                    jTextArea1.setText(mostrarAd(matrizAd, nodos));
                    jTextArea1.setEditable(false);
                    jTextArea2.setText(mostrarIn(matrizIn, nodos, aristas));
                    jTextArea2.setEditable(false);
                    jTextArea3.setText(definicion(nodos, aristas));
                    jTextArea3.setEditable(false);
                } else JOptionPane.showMessageDialog(null, "Ya existe un nodo en esta área");
        }
        if (SwingUtilities.isRightMouseButton(evt)) {
            Nodos_v2 n = buscaNodo(nodos, x, y);
            if (n != null) {
                if (nodoSelec1 == null) {
                    nodoSelec1 = n;
                } else if (nodoSelec2 == null && !n.equals(nodoSelec1)) {
                    nodoSelec2 = n;
                    // controla que no se repita la arista con un método buscarArista
                    if (!buscarArista(nodoSelec1, nodoSelec2, aristas)) {
                        try {
                            int pesoArista = Integer.parseInt(JOptionPane.showInputDialog("Digite el peso de la arista")); 
                            if(pesoArista>0){
                                int xx = buscaIndiceNodo(nodos, nodoSelec1.getNombreN());
                                int yy = buscaIndiceNodo(nodos, nodoSelec2.getNombreN());

                                matrizAd[xx][yy] = pesoArista;
                                matrizAd[yy][xx] = pesoArista;
                            
                                matrizIn[xx][indiceAristas] = pesoArista;
                                matrizIn[yy][indiceAristas] = pesoArista;
                            
                                Aristas_v2 arista = new Aristas_v2(nodoSelec1, nodoSelec2, pesoArista);
                                aristas.add(arista);

                                pesosAristas.add(pesoArista);
                                arista.pintarArista(jPanel2.getGraphics());
                                indiceAristas++;
                            }else{
                                JOptionPane.showMessageDialog(null, "Peso de la arista no válido");
                            }                      
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "error");
                        }
                    } else JOptionPane.showMessageDialog(null, "Ya existe una arista entre los nodos seleccionados");
                    
                    jTextArea1.setText(mostrarAd(matrizAd, nodos));
                    jTextArea1.setEditable(false);
                    
                    jTextArea2.setText(mostrarIn(matrizIn, nodos, aristas));
                    jTextArea2.setEditable(false);
                    
                    jTextArea3.setText(definicion(nodos, aristas));
                    jTextArea3.setEditable(false);
                    nodoSelec1 = null;
                    nodoSelec2 = null;
                }
            }
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jPanel2.removeAll();
        jPanel2.repaint();
        jPanel4.removeAll();
        jPanel4.repaint();
        jTextArea1.setText("");
        jTextArea2.setText("");
        jTextArea3.setText("");
        jTextArea4.setText("");
        
        nodos = new ArrayList();
        aristas = new ArrayList();
        pesosAristas = new ArrayList();
        matrizAd = new int[t][t];
        matrizIn = new int[t][t*(t-1)/2];
        indiceNodos = 0;
        indiceAristas = 0;
        nodoSelec1 = null;
        nodoSelec2 = null;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i=0; i<aristas.size(); i++){
                aristas.get(i).repintarArista(jPanel2.getGraphics()); // Graphics
                //aristas[i].repintarArista((Graphics2D) jPanel2.getGraphics());
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jPanel4.removeAll();
        jPanel4.repaint();
        String cadena = definicion (nodos, aristas);
        try{
            if(!nodos.isEmpty() && esCompleto(matrizAd)){
                //Grafo Completo
                cadena += "\n El grafo ES completo";

                MyIcon icon = new MyIcon();
                String Op[] = listaNodos(nodos);
                String opcion = (String)JOptionPane.showInputDialog(null, "Selecciona el nodo inicial", "Nodo", JOptionPane.DEFAULT_OPTION, icon, Op, Op[0]);
                camino(opcion);
            }else{
                cadena += "\n El grafo NO ES completo";
                JOptionPane.showMessageDialog(null, "El grafo NO ES Completo");
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Seleccione un nodo");
        }
        jTextArea3.setText(cadena);
        jTextArea3.setEditable(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2_conexo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2_conexo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2_conexo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana_v2_conexo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana_v2_conexo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    // End of variables declaration//GEN-END:variables
}

class MyIcon implements Icon{

    public void paintIcon(Component c, Graphics g, int x, int y) {
        Graphics2D graphics = (Graphics2D) g;
        Image image = new ImageIcon(getClass().getResource("/imagenes/options.png")).getImage();
        graphics.drawImage(image, x, y, c);
    }

    public int getIconWidth() {
        return 50;
    }

    public int getIconHeight() {
        return 50;
    }
}